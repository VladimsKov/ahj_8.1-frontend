(()=>{"use strict";var e,t,n,r,o,a,c,s={721:(e,t,n)=>{n(177);class r{static addUser(e){document.querySelector(".chat-users").insertAdjacentHTML("beforeend",`\n    <div class='user-container'>\n    <div class='user-elem'></div>\n    <div>${e}</div>\n    </div>\n    `)}static showChatUser(e){document.querySelector(".chat-wrap").insertAdjacentHTML("beforeend",`\n    <div class='chat-user'>Чат открыт: <span data-user='active'>${e}<span></div>\n    `)}static showActiveUser(e){const t=Array.from(document.querySelector(".chat-users").children).find((t=>t.lastElementChild.textContent===e));t&&t.firstElementChild.classList.add("active")}static delChatUser(){document.querySelector(".chat-user").remove()}static delOutUser(e){const t=document.querySelectorAll(".user-container");for(const n of t)if(n.lastElementChild.textContent===e){n.remove();break}}static showOutBtn(){document.querySelector("#out-btn").classList.remove("hidden"),document.querySelector("#inp-btn").classList.add("hidden")}static showInputBtn(){document.querySelector("#out-btn").classList.add("hidden"),document.querySelector("#inp-btn").classList.remove("hidden")}}class o{static showChatWindow(e,t){document.querySelector("#chat").insertAdjacentHTML("beforeend",'\n    <div class="chat-msg-wrap">\n    <div class="inner-msg-wrap">\n    <div class="msg-block"></div>\n    </div>\n    <form id="send-msg" >\n    <input name="msg" class="msg-input" placeholder="Введите сообщение">\n    </form>\n    </div>  \n    ');const n=document.querySelector("#send-msg");n.addEventListener("submit",(r=>{r.preventDefault();const o=document.querySelector("[data-user=active]").textContent,a=n.msg.value;a&&t.sendMsg(e,o,a)}))}static closeChatWindow(){document.querySelector(".chat-msg-wrap").remove()}static showMsg(e){const t=document.querySelector(".msg-block");if(document.querySelector("[data-user=active]")){const n=document.querySelector("[data-user=active]").textContent;let r="",o="";e.name===n?(r="own-msg",o="Вы"):(r="other-msg",o=e.name),t.insertAdjacentHTML("beforeend",`\n      <div class = "msg ${r}">\n      <span>${o}, ${e.date}</span>\n      <div class="msg-text">${e.content}</div>\n      </div>\n      `),t.scrollTop=1e3,document.querySelector(".msg-input").value=""}}static msgDate(e){const t=new Date(e);return`${t.getDate()<10?`0${t.getDate()}`:t.getDate()}.${t.getMonth()<9?`0${t.getMonth()+1}`:t.getMonth()+1}.${t.getFullYear()} ${t.getHours()<10?`0${t.getHours()}`:t.getHours()}:${t.getMinutes()<10?`0${t.getMinutes()}`:t.getMinutes()}`}}class a{static createModal(){a.modalWrap().insertAdjacentHTML("beforeend","<div class='modal-container'>\n    <p>Выберите псевдоним</p>\n    <form name='set_nickname'>\n    <input name='nickname' class='modal-name'>\n    </form>\n    <div class='modal-btns'>\n    <button class='modal-btn' id='mod-cansel-btn'>Отмена</button>\n    <button class='modal-btn' id='mod-ok-btn'>Продолжить</button>\n    </div>\n    </div>"),document.forms.set_nickname.nickname.focus()}static modalWrap(){const e=document.createElement("div");return e.dataset.modal="modal-wrap",e.classList.add("modal-wrap"),document.body.append(e),e}static closemodal(){document.querySelector("[data-modal=modal-wrap]").remove()}}const c=new class{constructor(e){this.baseUrl=e}async getUsers(e){document.querySelector(".chat-users").replaceChildren();const t=await fetch(`${this.baseUrl}users`);let n=await t.json();n.length>0&&n.forEach((e=>{r.addUser(e.nickname)})),e&&r.showActiveUser(e)}async getMessages(){document.querySelector(".msg-block").replaceChildren();const e=await fetch(`${this.baseUrl}messages`);(await e.json()).forEach((e=>{o.showMsg(e)}))}inputUser(e){const t=document.querySelector(".modal-name").value;if(!t)return void alert("Заполните поле");const n={type:"input",name:t};e.send(JSON.stringify(n))}outUser(e,t){const n={type:"output",name:t};e.send(JSON.stringify(n))}sendMsg(e,t,n){const r=Date.now(),a={type:"send_msg",name:t,date:o.msgDate(r),content:n};e.send(JSON.stringify(a))}}("https://mini-chat-u2vq.onrender.com/"),s=new WebSocket("wss://mini-chat-u2vq.onrender.com/");document.addEventListener("DOMContentLoaded",(()=>{let e=sessionStorage.getItem("active_name");c.getUsers(e),e?(r.showChatUser(e),r.showOutBtn(),o.showChatWindow(s,c),c.getMessages()):(a.createModal(),document.querySelector("#mod-cansel-btn").addEventListener("click",(()=>{a.closemodal(),r.showInputBtn()})),document.querySelector("#mod-ok-btn").addEventListener("click",(()=>{c.inputUser(s)})),document.forms.set_nickname.addEventListener("submit",(e=>{e.preventDefault(),c.inputUser(s)}))),window.addEventListener("beforeunload",(()=>{e&&c.outUser(s,e),sessionStorage.removeItem("active_name")})),document.querySelector("#inp-btn").addEventListener("click",(()=>{a.createModal(),document.querySelector("#mod-ok-btn").addEventListener("click",(()=>{c.inputUser(s)})),document.forms.set_nickname.addEventListener("submit",(e=>{e.preventDefault(),c.inputUser(s)})),document.querySelector("#mod-cansel-btn").addEventListener("click",(()=>{a.closemodal(),r.showInputBtn()}))})),document.querySelector("#out-btn").addEventListener("click",(()=>{c.outUser(s,e)})),s.addEventListener("message",(t=>{const n=JSON.parse(t.data);switch(n.type){case"false_name":alert("Имя занято. Введите другое имя");break;case"user_ok":r.addUser(n.name);break;case"input_ok":r.addUser(n.added_name),r.showChatUser(n.added_name),r.showActiveUser(n.added_name),r.showOutBtn(),o.showChatWindow(s,c),a.closemodal(),e=n.added_name,sessionStorage.setItem("active_name",n.added_name),c.getMessages();break;case"out_user":r.delOutUser(n.name);break;case"logout":c.getUsers(e),r.delChatUser(),r.showInputBtn(),o.closeChatWindow(),e=null,sessionStorage.removeItem("active_name");break;case"get_msg":o.showMsg(n.msg_data)}}))}))},783:(e,t,n)=>{var r=n(618),o=Object.create(null),a="undefined"==typeof document,c=Array.prototype.forEach;function s(){}function i(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(l(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var n=e.cloneNode();n.isLoaded=!1,n.addEventListener("load",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.addEventListener("error",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(n,e.nextSibling):e.parentNode.appendChild(n)}}function d(){var e=document.querySelectorAll("link");c.call(e,(function(e){!0!==e.visited&&i(e)}))}function l(e){return!!/^https?:/i.test(e)}e.exports=function(e,t){if(a)return console.log("no window.document found, will not HMR CSS"),s;var n,u,p=function(e){var t=o[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var n=document.getElementsByTagName("script"),a=n[n.length-1];a&&(t=a.src)}o[e]=t}return function(e){if(!t)return null;var n=t.split(/([^\\/]+)\.js$/),o=n&&n[1];return o&&e?e.split(",").map((function(e){var n=new RegExp("".concat(o,"\\.js$"),"g");return r(t.replace(n,"".concat(e.replace(/{fileName}/g,o),".css")))})):[t.replace(".js",".css")]}}(e);return n=function(){var e=p(t.filename),n=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),n=!1;return c.call(t,(function(t){if(t.href){var o=function(e,t){var n;return e=r(e,{stripWWW:!1}),t.some((function(r){e.indexOf(t)>-1&&(n=r)})),n}(t.href,e);l(o)&&!0!==t.visited&&o&&(i(t,o),n=!0)}})),n}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void d();n?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),d())},50,u=0,function(){var e=this,t=arguments,r=function(){return n.apply(e,t)};clearTimeout(u),u=setTimeout(r,50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",n=e.replace(new RegExp(t,"i"),"").split("/"),r=n[0].toLowerCase().replace(/\.$/,"");return n[0]="",t+r+n.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},177:(e,t,n)=>{var r=n(783)(e.id,{locals:!1});e.hot.dispose(r),e.hot.accept(void 0,r)}},i={};function d(e){var t=i[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var n=i[e]={id:e,exports:{}};try{var r={id:e,module:n,factory:s[e],require:d};d.i.forEach((function(e){e(r)})),n=r.module,r.factory.call(n.exports,n,n.exports,r.require)}catch(e){throw n.error=e,e}return n.exports}d.m=s,d.c=i,d.i=[],d.hu=e=>e+"."+d.h()+".hot-update.js",d.miniCssF=e=>"main.css",d.hmrF=()=>"main."+d.h()+".hot-update.json",d.h=()=>"ee190f2abe7d85982b9d",d.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),d.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="ajs:",d.l=(n,r,o,a)=>{if(e[n])e[n].push(r);else{var c,s;if(void 0!==o)for(var i=document.getElementsByTagName("script"),l=0;l<i.length;l++){var u=i[l];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==t+o){c=u;break}}c||(s=!0,(c=document.createElement("script")).charset="utf-8",c.timeout=120,d.nc&&c.setAttribute("nonce",d.nc),c.setAttribute("data-webpack",t+o),c.src=n),e[n]=[r];var p=(t,r)=>{c.onerror=c.onload=null,clearTimeout(f);var o=e[n];if(delete e[n],c.parentNode&&c.parentNode.removeChild(c),o&&o.forEach((e=>e(r))),t)return t(r)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:c}),12e4);c.onerror=p.bind(null,c.onerror),c.onload=p.bind(null,c.onload),s&&document.head.appendChild(c)}},(()=>{var e,t,n,r={},o=d.c,a=[],c=[],s="idle",i=0,l=[];function u(e){s=e;for(var t=[],n=0;n<c.length;n++)t[n]=c[n].call(null,e);return Promise.all(t)}function p(){0==--i&&u("ready").then((function(){if(0===i){var e=l;l=[];for(var t=0;t<e.length;t++)e[t]()}}))}function f(e){if("idle"!==s)throw new Error("check() is only allowed in idle status");return u("check").then(d.hmrM).then((function(n){return n?u("prepare").then((function(){var r=[];return t=[],Promise.all(Object.keys(d.hmrC).reduce((function(e,o){return d.hmrC[o](n.c,n.r,n.m,e,t,r),e}),[])).then((function(){return t=function(){return e?m(e):u("ready").then((function(){return r}))},0===i?t():new Promise((function(e){l.push((function(){e(t())}))}));var t}))})):u(v()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==s?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+s+")")})):m(e)}function m(e){e=e||{},v();var r=t.map((function(t){return t(e)}));t=void 0;var o=r.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var a=u("dispose");r.forEach((function(e){e.dispose&&e.dispose()}));var c,s=u("apply"),i=function(e){c||(c=e)},d=[];return r.forEach((function(e){if(e.apply){var t=e.apply(i);if(t)for(var n=0;n<t.length;n++)d.push(t[n])}})),Promise.all([a,s]).then((function(){return c?u("fail").then((function(){throw c})):n?m(e).then((function(e){return d.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):u("idle").then((function(){return d}))}))}function v(){if(n)return t||(t=[]),Object.keys(d.hmrI).forEach((function(e){n.forEach((function(n){d.hmrI[e](n,t)}))})),n=void 0,!0}d.hmrD=r,d.i.push((function(l){var m,v,g,y,b=l.module,w=function(t,n){var r=o[n];if(!r)return t;var c=function(c){if(r.hot.active){if(o[c]){var s=o[c].parents;-1===s.indexOf(n)&&s.push(n)}else a=[n],e=c;-1===r.children.indexOf(c)&&r.children.push(c)}else console.warn("[HMR] unexpected require("+c+") from disposed module "+n),a=[];return t(c)},d=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(n){t[e]=n}}};for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&"e"!==l&&Object.defineProperty(c,l,d(l));return c.e=function(e){return function(e){switch(s){case"ready":u("prepare");case"prepare":return i++,e.then(p,p),e;default:return e}}(t.e(e))},c}(l.require,l.id);b.hot=(m=l.id,v=b,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:g=e!==m,_requireSelf:function(){a=v.parents.slice(),e=g?void 0:m,d(m)},active:!0,accept:function(e,t,n){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._acceptedDependencies[e[r]]=t||function(){},y._acceptedErrorHandlers[e[r]]=n;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,s){case"idle":t=[],Object.keys(d.hmrI).forEach((function(e){d.hmrI[e](m,t)})),u("ready");break;case"ready":Object.keys(d.hmrI).forEach((function(e){d.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:f,apply:h,status:function(e){if(!e)return s;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var t=c.indexOf(e);t>=0&&c.splice(t,1)},data:r[m]},e=void 0,y),b.parents=a,b.children=[],a=[],l.require=w})),d.hmrC={},d.hmrI={}})(),(()=>{var e;d.g.importScripts&&(e=d.g.location+"");var t=d.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),d.p=e})(),n=(e,t,n,r)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=a=>{if(o.onerror=o.onload=null,"load"===a.type)n();else{var c=a&&("load"===a.type?"missing":a.type),s=a&&a.target&&a.target.href||t,i=new Error("Loading CSS chunk "+e+" failed.\n("+s+")");i.code="CSS_CHUNK_LOAD_FAILED",i.type=c,i.request=s,o.parentNode.removeChild(o),r(i)}},o.href=t,document.head.appendChild(o),o},r=(e,t)=>{for(var n=document.getElementsByTagName("link"),r=0;r<n.length;r++){var o=(c=n[r]).getAttribute("data-href")||c.getAttribute("href");if("stylesheet"===c.rel&&(o===e||o===t))return c}var a=document.getElementsByTagName("style");for(r=0;r<a.length;r++){var c;if((o=(c=a[r]).getAttribute("data-href"))===e||o===t)return c}},o=[],a=[],c=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var t=o[e];t.parentNode&&t.parentNode.removeChild(t)}o.length=0},apply:()=>{for(var e=0;e<a.length;e++)a[e].rel="stylesheet";a.length=0}}),d.hmrC.miniCss=(e,t,s,i,l,u)=>{l.push(c),e.forEach((e=>{var t=d.miniCssF(e),c=d.p+t,s=r(t,c);s&&i.push(new Promise(((t,r)=>{var i=n(e,c,(()=>{i.as="style",i.rel="preload",t()}),r);o.push(s),a.push(i)})))}))},(()=>{var e,t,n,r,o,a=d.hmrS_jsonp=d.hmrS_jsonp||{179:0},c={};function s(t,n){return e=n,new Promise(((e,n)=>{c[t]=e;var r=d.p+d.hu(t),o=new Error;d.l(r,(e=>{if(c[t]){c[t]=void 0;var r=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;o.message="Loading hot update chunk "+t+" failed.\n("+r+": "+a+")",o.name="ChunkLoadError",o.type=r,o.request=a,n(o)}}))}))}function i(e){function c(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),a=o.id,c=o.chain,i=d.c[a];if(i&&(!i.hot._selfAccepted||i.hot._selfInvalidated)){if(i.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:a};if(i.hot._main)return{type:"unaccepted",chain:c,moduleId:a};for(var l=0;l<i.parents.length;l++){var u=i.parents[l],p=d.c[u];if(p){if(p.hot._declinedDependencies[a])return{type:"declined",chain:c.concat([u]),moduleId:a,parentId:u};-1===t.indexOf(u)&&(p.hot._acceptedDependencies[a]?(n[u]||(n[u]=[]),s(n[u],[a])):(delete n[u],t.push(u),r.push({chain:c.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}d.f&&delete d.f.jsonpHmr,t=void 0;var i={},l=[],u={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in n)if(d.o(n,f)){var h,m=n[f],v=!1,g=!1,y=!1,b="";switch((h=m?c(f):{type:"disposed",moduleId:f}).chain&&(b="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+b));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+b));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(v=new Error("Aborted because "+f+" is not accepted"+b));break;case"accepted":e.onAccepted&&e.onAccepted(h),g=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),y=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(g)for(f in u[f]=m,s(l,h.outdatedModules),h.outdatedDependencies)d.o(h.outdatedDependencies,f)&&(i[f]||(i[f]=[]),s(i[f],h.outdatedDependencies[f]));y&&(s(l,[h.moduleId]),u[f]=p)}n=void 0;for(var w,E=[],_=0;_<l.length;_++){var k=l[_],S=d.c[k];S&&(S.hot._selfAccepted||S.hot._main)&&u[k]!==p&&!S.hot._selfInvalidated&&E.push({module:k,require:S.hot._requireSelf,errorHandler:S.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete a[e]})),r=void 0;for(var t,n=l.slice();n.length>0;){var o=n.pop(),c=d.c[o];if(c){var s={},u=c.hot._disposeHandlers;for(_=0;_<u.length;_++)u[_].call(null,s);for(d.hmrD[o]=s,c.hot.active=!1,delete d.c[o],delete i[o],_=0;_<c.children.length;_++){var p=d.c[c.children[_]];p&&(e=p.parents.indexOf(o))>=0&&p.parents.splice(e,1)}}}for(var f in i)if(d.o(i,f)&&(c=d.c[f]))for(w=i[f],_=0;_<w.length;_++)t=w[_],(e=c.children.indexOf(t))>=0&&c.children.splice(e,1)},apply:function(t){for(var n in u)d.o(u,n)&&(d.m[n]=u[n]);for(var r=0;r<o.length;r++)o[r](d);for(var a in i)if(d.o(i,a)){var c=d.c[a];if(c){w=i[a];for(var s=[],p=[],f=[],h=0;h<w.length;h++){var m=w[h],v=c.hot._acceptedDependencies[m],g=c.hot._acceptedErrorHandlers[m];if(v){if(-1!==s.indexOf(v))continue;s.push(v),p.push(g),f.push(m)}}for(var y=0;y<s.length;y++)try{s[y].call(null,w)}catch(n){if("function"==typeof p[y])try{p[y](n,{moduleId:a,dependencyId:f[y]})}catch(r){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:a,dependencyId:f[y],error:r,originalError:n}),e.ignoreErrored||(t(r),t(n))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:a,dependencyId:f[y],error:n}),e.ignoreErrored||t(n)}}}for(var b=0;b<E.length;b++){var _=E[b],k=_.module;try{_.require(k)}catch(n){if("function"==typeof _.errorHandler)try{_.errorHandler(n,{moduleId:k,module:d.c[k]})}catch(r){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:k,error:r,originalError:n}),e.ignoreErrored||(t(r),t(n))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:k,error:n}),e.ignoreErrored||t(n)}}return l}}}self.webpackHotUpdateajs=(t,r,a)=>{for(var s in r)d.o(r,s)&&(n[s]=r[s],e&&e.push(s));a&&o.push(a),c[t]&&(c[t](),c[t]=void 0)},d.hmrI.jsonp=function(e,t){n||(n={},o=[],r=[],t.push(i)),d.o(n,e)||(n[e]=d.m[e])},d.hmrC.jsonp=function(e,c,l,u,p,f){p.push(i),t={},r=c,n=l.reduce((function(e,t){return e[t]=!1,e}),{}),o=[],e.forEach((function(e){d.o(a,e)&&void 0!==a[e]?(u.push(s(e,f)),t[e]=!0):t[e]=!1})),d.f&&(d.f.jsonpHmr=function(e,n){t&&d.o(t,e)&&!t[e]&&(n.push(s(e)),t[e]=!0)})},d.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(d.p+d.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),d(721)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,